// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * Graphic screen library.
 */
class Screen {

	static int screenBase, screenEnd;
	static boolean black;
	static Array bits;

    /** Initializes the Screen. */
    function void init()
	{
		var int i, bit;
		
		let screenBase = 16384;
		let screenEnd = 24575;
		
		let black = true;
		
		let bits = Array.new(16);
		let i = 0; let bit = 1;
		while (i < 16)
		{
			let bits[i] = bit;
			let bit = bit + bit;
			let i = i + 1;
		}
		
		return;
		
    }

    /** Erases the whole screen. */
    function void clearScreen()
	{
		var int pixelsWord;
		let pixelsWord = screenBase;
		
		while(pixelsWord < screenEnd)
		{
			do Memory.poke(pixelsWord, 0);
			let pixelsWord = pixelsWord + 1;
		}
		
		return;
    }

    /** Sets the color to be used in further draw commands
     *  where white = false, black = true. */
    function void setColor(boolean b)
	{
		let black = b;
		return;
    }

    /** Draws the (x, y) pixel. */
    function void drawPixel(int x, int y) 
	{
		var int pixel, word, value, adj;
		

		let pixel = x - ((x / 16) * 16);
		let word = screenBase + (x / 16) + (y * 32);
		let value = Memory.peek(word);
		let adj = bits[pixel];
		
		if(black)
		{
			let value = value | adj;
		}
		else
		{
			let value = (value | adj) & (~(value & adj));
		}
		
		do Memory.poke(word, value);
		return;
		
    }

    /** Draws a line from (x1, y1) to (x2, y2). */
    function void drawLine(int x1, int y1, int x2, int y2)
	{	
		var int a, b, minX, maxX, minY, maxY, dx, dy, derivativeRatio;
		
		
		let a = 0;
		let b = 0;
		
		let maxX = Math.max(x1, x2);
		let minX = Math.min(x1, x2);
		let maxY = Math.max(y1, y2);
		let minY = Math.min(y1, y2);	
		
		let dx = maxX - minX;
		let dy = maxY - minY;
		
	
		
		if(dy = 0)
		{
			do Screen.drawHorizontalLine(minX, maxX, y1);
			return;
		}
		
		if(dx = 0)
		{
			while(minY < maxY)
			{
				do Screen.drawPixel(x1, minY);
				let minY = minY + 1;
			}
			return;
		}
		
	
		while ((a < dx ) & (b < dy))
		{
		
			if (x1 > x2)
			{
				if (y1 > y2)
				{
					do Screen.drawPixel(x1 - a, y1 - b);
				}
				else
				{
					do Screen.drawPixel(x1 - a, y1 + b);
				}
			}
			
			if(x1 < x2)
			{
				if (y1 > y2)
				{
					do Screen.drawPixel(x1 + a, y1 - b);
				}
				else
				{
					do Screen.drawPixel(x1 + a, y1 + b);
				}
			}
						
			
			if (derivativeRatio < 0)
			{
				let a = a + 1;
				let derivativeRatio = derivativeRatio + dy;
			}
			else
			{
				let b = b + 1; 
				let derivativeRatio = derivativeRatio - dx;
			}
			

		}
		
		return;
		
		
    }

    /** Draws a filled rectangle where the top left corner
     *  is (x1, y1) and the bottom right corner is (x2, y2). */
    function void drawRectangle(int x1, int y1, int x2, int y2) 
	{
		while (y1 < y2)
		{
			do Screen.drawHorizontalLine(x1, x2, y1);
			let y1 = y1 + 1;
		}	
		return;
    }

    /** Draws a filled circle of radius r around (cx, cy). */
    function void drawCircle(int cx, int cy, int r) 
	{
		var int dy, dySquared, rSquared, currRadius;
		
		let rSquared = r * r;
		let dy = -r;
		
		while(dy < (r + 1))
		{
			if ((cy + dy > -1) & (cy + dy < 257)) 
			{
                let dySquared = dy * dy;
                let currRadius = Math.sqrt(Math.abs(rSquared - dySquared));
                do Screen.drawHorizontalLine(cx - currRadius, cx + currRadius, cy + dy);
            }
			let dy = dy + 1;
		}
		return;
    }
	
	function void drawHorizontalLine(int x1, int x2, int y)
	{
		while (x1 < x2)
		{
			if ((Screen.modulo(x1,16) = 0) & ((x2 - x1) > 15))
			{
				if (black)
				{
					do Memory.poke(screenBase + (y * 32) + (Math.divide(x1,16)), -1);
				}
				else
				{
					do Memory.poke(screenBase + (y * 32) + (Math.divide(x1,16)), 0);
				}
				let x1 = x1 + 16;
			}
			else
			{
				do Screen.drawPixel(x1, y);
				let x1 = x1 + 1;
			}
		}
		return;
	}
	
	function int modulo(int a, int b)
	{
		return (a - (b * (a/b)));
	}
}
