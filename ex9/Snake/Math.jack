// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A basic math library.
 */
class Math {

	static Array bits;

    /** Initializes the library. */
    function void init() {
    	let bits = Array.new(16);
        let bits[0] = 1;
        let bits[1] = 2;
        let bits[2] = 4;
        let bits[3] = 8;
        let bits[4] = 16;
        let bits[5] = 32;
        let bits[6] = 64;
        let bits[7] = 128;
        let bits[8] = 256;
        let bits[9] = 512;
        let bits[10] = 1024;
        let bits[11] = 2048;
        let bits[12] = 4096;
        let bits[13] = 8192;
        let bits[14] = 16384;
        let bits[15] = 16384 + 16384;
        
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) 
    {
    	if(x > 0)
    	{
    		return x;
    	}
    	
    	 return -x;
    }

    /** Returns the product of x and y. */
    function int multiply(int x, int y)
    {
        var int shiftedX, sum, j;
    	
    	let sum = 0;
    	let shiftedX = x;
    	let j = 0;
    	
    	while (~(j = 16))
    	{
    	
    		if (Math.jthBitOf(y, j) = true)
    		{
    			let sum = sum + shiftedX;
    		}
    		
    		let shiftedX = shiftedX + shiftedX;
    		let j = j + 1;
    	}
    	
    	return sum;
    }

    /** Returns the integer part of x/y. */
    function int divide(int x, int y) 
    {
    	var int quotient, result, temp, sign;
    	
		if ((x < 0) = (y < 0)) // both negative or positive
    	{
    		let sign = 1;
    	}
    	else
		{
			let sign = -1;
		}
    	
    	let x = Math.abs(x);
    	let y = Math.abs(y);
    	
    	if (y > x)
    	{
    		return 0;
    	}
    	
    	let quotient = Math.divide(x, y + y);
    	
    	let result = quotient + quotient;
    	
		let temp = Math.multiply(quotient, y);
    	if (~(x - (temp + temp) < y))
    	{
    		let result = result + 1;
    	}
    	
    	return result * sign;

    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x)
    {
		var int y, tempResult, quotient, j;
			
		let y = 0;
		let j = 7;
			
		while (~(j < 0))
		{
			let tempResult = y + bits[j];
			let quotient = Math.multiply(tempResult, tempResult);
			
			if(~(quotient > x) & (quotient > 0))
			{
				let y = tempResult;
			}
				
			let j = j - 1;
		}
			
		return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b)
    {
    	if (a > b)
    	{
    		return a;
    	}
    	return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) 
    {
    	if (a > b)
    	{
    		return b;
    	}
    	return a;
    }
    
    
    /** Returns the j'th bit of x. */
    function int jthBitOf(int x, int j)
    {
    	return ~((x & bits[j]) = 0);
    }	
}

