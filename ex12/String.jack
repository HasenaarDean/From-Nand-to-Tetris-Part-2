// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents a String object. Implements the String type.
 */
class String {
	
	field int length;
	field int maxSize;
	field Array chars;

    /** Constructs a new empty String with a maximum length of maxLength. */
    constructor String new(int maxLength) 
	{
		let maxLength = Math.max(maxLength, 1);
		let chars = Array.new(maxLength);
					
		let length = 0;
		let maxSize = maxLength;
		
		return this;
    }

    /** De-allocates the string and frees its space. */
    method void dispose() 
	{
		do chars.dispose();
		return;
    }

    /** Returns the current length of this String. */
    method int length() 
	{
		return length;
    }

    /** Returns the character at location j. */
    method char charAt(int j) 
	{
		return chars[j];
    }

    /** Sets the j'th character of this string to be c. */
    method void setCharAt(int j, char c) 
	{
		let chars[j] = c;
		return;
    }

    /** Appends the character c to the end of this String.
     *  Returns this string as the return value. */
    method String appendChar(char c)
	{
		if (length < maxSize)
		{
			let chars[length] = c;
			let length = length + 1;
		}
		
		return this;
    }

    /** Erases the last character from this String. */
    method void eraseLastChar()
	{
		if (length > 0)
		{
			let length = length - 1;
		}
		return;
    }

    /** Returns the integer value of this String until the first non
     *  numeric character. */
    method int intValue()
	{
		var int sign, pos, intValue;
		
		if (chars[0] = 45) // fitst charater is '-'
		{
			let sign = -1;
			let pos = 1;
		}
		else
		{
			let sign = 1;
			let pos = 0;
		}
		
		while (~(pos = length))
		{
			let intValue = (intValue * 10) + String.charToDigit(chars[pos]);
			let pos = pos + 1;
		}
		
		return sign * intValue;
		
    }

    /** Sets this String to hold a representation of the given number. */
    method void setInt(int number) 
	{
		let length = 0;
		
		if (number < 0) // number is negative, add '0' and work on abs.
		{
			do appendChar(45);
			let length = 1;
			let number = -number;
		}
	
		do actualSetInt(number);
		
		return;
    }
	
	method void actualSetInt(int number)
	{
		if (number < 10) // one digit
		{
			do appendChar(String.digitToChar(number));
		}
		else
		{
			do actualSetInt(number / 10);
			do appendChar(String.digitToChar(number - ((number / 10) * 10))); // append lst digit
		}
		
		return;
	}

    /** Returns the new line character. */
    function char newLine() 
	{
		return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() 
	{
		return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() 
	{
		return 34;
    }
	
	function char digitToChar(int digit)
	{
		return digit + 48;
	}
	
	function int charToDigit(char character)
	{
		return character - 48;
	}
}
